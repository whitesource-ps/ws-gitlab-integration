name: CI
on:
  push:
    branches:
        - '**'
        - '!ws-iac-scan-results/**'
        - '!whitesource-remediate/master-all**'
        - '!whitesource/migrate-configuration**'
    tags:
        - '*'
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        run: |
          echo "TOOL_NAME=ws2gl_format_convertor.py" >> $GITHUB_ENV
          echo "VERSION=0.0.0.ci0" >> $GITHUB_ENV
          echo "TOOL_DIR=$(echo '${{ github.repository }}' |awk -F '/' '{gsub(/-/, "_", $0) ;print $NF}')" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v4
#       - uses: UnicornGlobal/trufflehog-actions-scan@master
#         with:
#           branch: ${{ github.head_ref }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Set package version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"$VERSION\"/g"  ${{ env.TOOL_DIR }}/_version.py
      - uses: UnicornGlobal/trufflehog-actions-scan@master
        with:
          branch: ${{ github.head_ref }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 spdx-tools jsonschema
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Perform integration test and compare to existing JSON
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          WS_USER_KEY: ${{ secrets.WS_USER_KEY }}
          WS_SCOPE_PROJ: ${{ secrets.WS_SCOPE_PROJ_WEBGOAT_INTEGRATION_TESTS }}
        run: python -m unittest
      - name: Full test (License)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: python ${TOOL_DIR}/ws2gl_format_convertor.py -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_SCOPE_PROJ_WEBGOAT_INTEGRATION_TESTS }} -t license
      - name: Full test (Security Violance)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: python ${TOOL_DIR}/ws2gl_format_convertor.py -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_SCOPE_PROJ_WEBGOAT_INTEGRATION_TESTS }} -t dependency -o /tmp
      - name: Full test (Security Violance alert based)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: python ${TOOL_DIR}/${TOOL_NAME} -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_SCOPE_PROJ_WEBGOAT_INTEGRATION_TESTS }} -t dependency_alert_based -o /tmp
      - name: Prepare tag
        if: contains(github.ref, 'refs/tags/v')
        id: prep
        run: |
          DOCKER_IMAGE=whitesourcetools/ws-gl-int
          VERSION=latest
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAGS="$TAGS,${DOCKER_IMAGE}:${VERSION}"
          fi
          echo ::set-output name=tags::${TAGS}
      - name: Set up Docker Buildx
        if: contains(github.ref, 'refs/tags/v')
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: contains(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push to DockerHub
        if: startsWith(github.ref, 'refs/tags/v')
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.prep.outputs.tags }}
      - name: confluence-markdown-sync
        if: contains(github.ref, 'refs/tags/v')
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2141159930
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
      - name: confluence-markdown-sync
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2319843680
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}          
